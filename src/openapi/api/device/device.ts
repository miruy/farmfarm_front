/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * FARMFARM EDGE SERVER API
 * MEMOCODE PLATFORM


에러 코드 목록:
- VALIDATION_ERROR: 유효성 검사 실패.
- INTERNAL_SERVER_ERROR: 알 수 없는 에러 발생. 관리자에게 문의하세요.
- FORBIDDEN: 해당 요청에 접근할 수 있는 권한이 없습니다.
- UNAUTHORIZED: 인증에 실패하였습니다.
- ERROR_1000: 동일한 loginId가 존재합니다.
- ERROR_1001: 이미 회원은 계정과 연결되었습니다.
- ERROR_1002: 계정에 한 개 이상의 회원을 연결할 수 없습니다.
- ERROR_1003: 하우스를 찾을 수 없습니다.
- ERROR_1004: 이미 동은 하우스와 연결되었습니다.
- ERROR_1005: 동을 찾을 수 없습니다.
- ERROR_1006: loginId, password가 null입니다.
- ERROR_1007: refresh token이 null입니다.
- ERROR_1008: 장치를 찾을 수 없습니다.
- ERROR_1009: 이미 동에 포함된 장치입니다.
- ERROR_1010: 동 장치를 찾을 수 없습니다.
- ERROR_1011: 이미 하우스에 포함된 장치입니다.
- ERROR_1012: 하우스 장치를 찾을 수 없습니다.

 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateDeviceRequest,
  DeviceApiSearchDevicesParams,
  GetDeviceByIdResponse,
  PageRsSearchDevicesResponse,
  UpdateDeviceRequest
} from '../../model'
import { farmfarmAxiosInstance } from '../../../axios/axios_instance';
import type { ErrorType, BodyType } from '../../../axios/axios_instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary 장치 검색
 */
export const deviceApiSearchDevices = (
    params?: DeviceApiSearchDevicesParams,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<PageRsSearchDevicesResponse>(
      {url: `/v1/devices`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getDeviceApiSearchDevicesQueryKey = (params?: DeviceApiSearchDevicesParams,) => {
    return [`/v1/devices`, ...(params ? [params]: [])] as const;
    }

    
export const getDeviceApiSearchDevicesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof deviceApiSearchDevices>>>, TError = ErrorType<unknown>>(params?: DeviceApiSearchDevicesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDeviceApiSearchDevicesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof deviceApiSearchDevices>>> = ({ signal }) => deviceApiSearchDevices(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DeviceApiSearchDevicesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof deviceApiSearchDevices>>>
export type DeviceApiSearchDevicesInfiniteQueryError = ErrorType<unknown>


export function useDeviceApiSearchDevicesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof deviceApiSearchDevices>>>, TError = ErrorType<unknown>>(
 params: undefined |  DeviceApiSearchDevicesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof deviceApiSearchDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDeviceApiSearchDevicesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof deviceApiSearchDevices>>>, TError = ErrorType<unknown>>(
 params?: DeviceApiSearchDevicesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof deviceApiSearchDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDeviceApiSearchDevicesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof deviceApiSearchDevices>>>, TError = ErrorType<unknown>>(
 params?: DeviceApiSearchDevicesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 장치 검색
 */

export function useDeviceApiSearchDevicesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof deviceApiSearchDevices>>>, TError = ErrorType<unknown>>(
 params?: DeviceApiSearchDevicesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDeviceApiSearchDevicesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary 장치 검색
 */
export const prefetchDeviceApiSearchDevicesInfinite = async <TData = Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError = ErrorType<unknown>>(
 queryClient: QueryClient, params?: DeviceApiSearchDevicesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ): Promise<QueryClient> => {

  const queryOptions = getDeviceApiSearchDevicesInfiniteQueryOptions(params,options)

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
}


export const getDeviceApiSearchDevicesQueryOptions = <TData = Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError = ErrorType<unknown>>(params?: DeviceApiSearchDevicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDeviceApiSearchDevicesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof deviceApiSearchDevices>>> = ({ signal }) => deviceApiSearchDevices(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DeviceApiSearchDevicesQueryResult = NonNullable<Awaited<ReturnType<typeof deviceApiSearchDevices>>>
export type DeviceApiSearchDevicesQueryError = ErrorType<unknown>


export function useDeviceApiSearchDevices<TData = Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError = ErrorType<unknown>>(
 params: undefined |  DeviceApiSearchDevicesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof deviceApiSearchDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDeviceApiSearchDevices<TData = Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError = ErrorType<unknown>>(
 params?: DeviceApiSearchDevicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof deviceApiSearchDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDeviceApiSearchDevices<TData = Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError = ErrorType<unknown>>(
 params?: DeviceApiSearchDevicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 장치 검색
 */

export function useDeviceApiSearchDevices<TData = Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError = ErrorType<unknown>>(
 params?: DeviceApiSearchDevicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDeviceApiSearchDevicesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary 장치 검색
 */
export const prefetchDeviceApiSearchDevices = async <TData = Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError = ErrorType<unknown>>(
 queryClient: QueryClient, params?: DeviceApiSearchDevicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiSearchDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ): Promise<QueryClient> => {

  const queryOptions = getDeviceApiSearchDevicesQueryOptions(params,options)

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
}


/**
 * @summary 장치 생성
 */
export const deviceApiCreateDevice = (
    createDeviceRequest: BodyType<CreateDeviceRequest>,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<string>(
      {url: `/v1/devices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDeviceRequest, signal
    },
      options);
    }
  


export const getDeviceApiCreateDeviceMutationOptions = <TData = Awaited<ReturnType<typeof deviceApiCreateDevice>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<CreateDeviceRequest>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {
const mutationKey = ['deviceApiCreateDevice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deviceApiCreateDevice>>, {data: BodyType<CreateDeviceRequest>}> = (props) => {
          const {data} = props ?? {};

          return  deviceApiCreateDevice(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyType<CreateDeviceRequest>}, TContext>}

    export type DeviceApiCreateDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof deviceApiCreateDevice>>>
    export type DeviceApiCreateDeviceMutationBody = BodyType<CreateDeviceRequest>
    export type DeviceApiCreateDeviceMutationError = ErrorType<unknown>

    /**
 * @summary 장치 생성
 */
export const useDeviceApiCreateDevice = <TData = Awaited<ReturnType<typeof deviceApiCreateDevice>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<CreateDeviceRequest>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        TData,
        TError,
        {data: BodyType<CreateDeviceRequest>},
        TContext
      > => {

      const mutationOptions = getDeviceApiCreateDeviceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary 장치 단건 조회
 */
export const deviceApiGetDeviceById = (
    deviceId: string,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<GetDeviceByIdResponse>(
      {url: `/v1/devices/${deviceId}`, method: 'GET', signal
    },
      options);
    }
  

export const getDeviceApiGetDeviceByIdQueryKey = (deviceId: string,) => {
    return [`/v1/devices/${deviceId}`] as const;
    }

    
export const getDeviceApiGetDeviceByIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof deviceApiGetDeviceById>>>, TError = ErrorType<unknown>>(deviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDeviceApiGetDeviceByIdQueryKey(deviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof deviceApiGetDeviceById>>> = ({ signal }) => deviceApiGetDeviceById(deviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(deviceId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DeviceApiGetDeviceByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof deviceApiGetDeviceById>>>
export type DeviceApiGetDeviceByIdInfiniteQueryError = ErrorType<unknown>


export function useDeviceApiGetDeviceByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof deviceApiGetDeviceById>>>, TError = ErrorType<unknown>>(
 deviceId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof deviceApiGetDeviceById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDeviceApiGetDeviceByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof deviceApiGetDeviceById>>>, TError = ErrorType<unknown>>(
 deviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof deviceApiGetDeviceById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDeviceApiGetDeviceByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof deviceApiGetDeviceById>>>, TError = ErrorType<unknown>>(
 deviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 장치 단건 조회
 */

export function useDeviceApiGetDeviceByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof deviceApiGetDeviceById>>>, TError = ErrorType<unknown>>(
 deviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDeviceApiGetDeviceByIdInfiniteQueryOptions(deviceId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary 장치 단건 조회
 */
export const prefetchDeviceApiGetDeviceByIdInfinite = async <TData = Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError = ErrorType<unknown>>(
 queryClient: QueryClient, deviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ): Promise<QueryClient> => {

  const queryOptions = getDeviceApiGetDeviceByIdInfiniteQueryOptions(deviceId,options)

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
}


export const getDeviceApiGetDeviceByIdQueryOptions = <TData = Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError = ErrorType<unknown>>(deviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDeviceApiGetDeviceByIdQueryKey(deviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof deviceApiGetDeviceById>>> = ({ signal }) => deviceApiGetDeviceById(deviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(deviceId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DeviceApiGetDeviceByIdQueryResult = NonNullable<Awaited<ReturnType<typeof deviceApiGetDeviceById>>>
export type DeviceApiGetDeviceByIdQueryError = ErrorType<unknown>


export function useDeviceApiGetDeviceById<TData = Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError = ErrorType<unknown>>(
 deviceId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof deviceApiGetDeviceById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDeviceApiGetDeviceById<TData = Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError = ErrorType<unknown>>(
 deviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof deviceApiGetDeviceById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDeviceApiGetDeviceById<TData = Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError = ErrorType<unknown>>(
 deviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 장치 단건 조회
 */

export function useDeviceApiGetDeviceById<TData = Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError = ErrorType<unknown>>(
 deviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDeviceApiGetDeviceByIdQueryOptions(deviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary 장치 단건 조회
 */
export const prefetchDeviceApiGetDeviceById = async <TData = Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError = ErrorType<unknown>>(
 queryClient: QueryClient, deviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceApiGetDeviceById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ): Promise<QueryClient> => {

  const queryOptions = getDeviceApiGetDeviceByIdQueryOptions(deviceId,options)

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
}


/**
 * @summary 장치 삭제
 */
export const deviceApiDeleteDevice = (
    deviceId: string,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,) => {
      
      
      return farmfarmAxiosInstance<void>(
      {url: `/v1/devices/${deviceId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeviceApiDeleteDeviceMutationOptions = <TData = Awaited<ReturnType<typeof deviceApiDeleteDevice>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{deviceId: string}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {
const mutationKey = ['deviceApiDeleteDevice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deviceApiDeleteDevice>>, {deviceId: string}> = (props) => {
          const {deviceId} = props ?? {};

          return  deviceApiDeleteDevice(deviceId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{deviceId: string}, TContext>}

    export type DeviceApiDeleteDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof deviceApiDeleteDevice>>>
    
    export type DeviceApiDeleteDeviceMutationError = ErrorType<unknown>

    /**
 * @summary 장치 삭제
 */
export const useDeviceApiDeleteDevice = <TData = Awaited<ReturnType<typeof deviceApiDeleteDevice>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{deviceId: string}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        TData,
        TError,
        {deviceId: string},
        TContext
      > => {

      const mutationOptions = getDeviceApiDeleteDeviceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary 장치 수정
 */
export const deviceApiUpdateDevice = (
    deviceId: string,
    updateDeviceRequest: BodyType<UpdateDeviceRequest>,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,) => {
      
      
      return farmfarmAxiosInstance<void>(
      {url: `/v1/devices/${deviceId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateDeviceRequest
    },
      options);
    }
  


export const getDeviceApiUpdateDeviceMutationOptions = <TData = Awaited<ReturnType<typeof deviceApiUpdateDevice>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{deviceId: string;data: BodyType<UpdateDeviceRequest>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {
const mutationKey = ['deviceApiUpdateDevice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deviceApiUpdateDevice>>, {deviceId: string;data: BodyType<UpdateDeviceRequest>}> = (props) => {
          const {deviceId,data} = props ?? {};

          return  deviceApiUpdateDevice(deviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{deviceId: string;data: BodyType<UpdateDeviceRequest>}, TContext>}

    export type DeviceApiUpdateDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof deviceApiUpdateDevice>>>
    export type DeviceApiUpdateDeviceMutationBody = BodyType<UpdateDeviceRequest>
    export type DeviceApiUpdateDeviceMutationError = ErrorType<unknown>

    /**
 * @summary 장치 수정
 */
export const useDeviceApiUpdateDevice = <TData = Awaited<ReturnType<typeof deviceApiUpdateDevice>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{deviceId: string;data: BodyType<UpdateDeviceRequest>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        TData,
        TError,
        {deviceId: string;data: BodyType<UpdateDeviceRequest>},
        TContext
      > => {

      const mutationOptions = getDeviceApiUpdateDeviceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    