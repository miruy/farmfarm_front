/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * FARMFARM EDGE SERVER API
 * MEMOCODE PLATFORM


에러 코드 목록:
- VALIDATION_ERROR: 유효성 검사 실패.
- INTERNAL_SERVER_ERROR: 알 수 없는 에러 발생. 관리자에게 문의하세요.
- FORBIDDEN: 해당 요청에 접근할 수 있는 권한이 없습니다.
- UNAUTHORIZED: 인증에 실패하였습니다.
- ERROR_1000: 동일한 loginId가 존재합니다.
- ERROR_1001: 이미 회원은 계정과 연결되었습니다.
- ERROR_1002: 계정에 한 개 이상의 회원을 연결할 수 없습니다.
- ERROR_1003: 하우스를 찾을 수 없습니다.
- ERROR_1004: 이미 동은 하우스와 연결되었습니다.
- ERROR_1005: 동을 찾을 수 없습니다.
- ERROR_1006: loginId, password가 null입니다.
- ERROR_1007: refresh token이 null입니다.
- ERROR_1008: 장치를 찾을 수 없습니다.
- ERROR_1009: 이미 동에 포함된 장치입니다.
- ERROR_1010: 동 장치를 찾을 수 없습니다.
- ERROR_1011: 이미 하우스에 포함된 장치입니다.
- ERROR_1012: 하우스 장치를 찾을 수 없습니다.
- ERROR_1013: 장치 기능을 찾을 수 없습니다.
- ERROR_1014: 이미 등록된 장치 설정 키입니다.
- ERROR_1015: 장치 설정을 찾을 수 없습니다.

 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateDongDeviceRequest,
  CreateDongRequest,
  DongApiSearchDongsParams,
  GetAllDongDevicesResponse,
  GetDongByIdResponse,
  PageRsSearchDongsResponse,
  UpdateDongRequest
} from '../../model'
import { farmfarmAxiosInstance } from '../../../axios/axios_instance';
import type { ErrorType, BodyType } from '../../../axios/axios_instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary 동 전체조회
 */
export const dongApiSearchDongs = (
    params?: DongApiSearchDongsParams,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<PageRsSearchDongsResponse>(
      {url: `/v1/dongs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getDongApiSearchDongsQueryKey = (params?: DongApiSearchDongsParams,) => {
    return [`/v1/dongs`, ...(params ? [params]: [])] as const;
    }

    
export const getDongApiSearchDongsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof dongApiSearchDongs>>>, TError = ErrorType<unknown>>(params?: DongApiSearchDongsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDongApiSearchDongsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dongApiSearchDongs>>> = ({ signal }) => dongApiSearchDongs(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DongApiSearchDongsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof dongApiSearchDongs>>>
export type DongApiSearchDongsInfiniteQueryError = ErrorType<unknown>


export function useDongApiSearchDongsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiSearchDongs>>>, TError = ErrorType<unknown>>(
 params: undefined |  DongApiSearchDongsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiSearchDongs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiSearchDongsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiSearchDongs>>>, TError = ErrorType<unknown>>(
 params?: DongApiSearchDongsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiSearchDongs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiSearchDongsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiSearchDongs>>>, TError = ErrorType<unknown>>(
 params?: DongApiSearchDongsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 동 전체조회
 */

export function useDongApiSearchDongsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiSearchDongs>>>, TError = ErrorType<unknown>>(
 params?: DongApiSearchDongsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDongApiSearchDongsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary 동 전체조회
 */
export const prefetchDongApiSearchDongsInfinite = async <TData = Awaited<ReturnType<typeof dongApiSearchDongs>>, TError = ErrorType<unknown>>(
 queryClient: QueryClient, params?: DongApiSearchDongsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ): Promise<QueryClient> => {

  const queryOptions = getDongApiSearchDongsInfiniteQueryOptions(params,options)

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
}


export const getDongApiSearchDongsQueryOptions = <TData = Awaited<ReturnType<typeof dongApiSearchDongs>>, TError = ErrorType<unknown>>(params?: DongApiSearchDongsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDongApiSearchDongsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dongApiSearchDongs>>> = ({ signal }) => dongApiSearchDongs(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DongApiSearchDongsQueryResult = NonNullable<Awaited<ReturnType<typeof dongApiSearchDongs>>>
export type DongApiSearchDongsQueryError = ErrorType<unknown>


export function useDongApiSearchDongs<TData = Awaited<ReturnType<typeof dongApiSearchDongs>>, TError = ErrorType<unknown>>(
 params: undefined |  DongApiSearchDongsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiSearchDongs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiSearchDongs<TData = Awaited<ReturnType<typeof dongApiSearchDongs>>, TError = ErrorType<unknown>>(
 params?: DongApiSearchDongsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiSearchDongs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiSearchDongs<TData = Awaited<ReturnType<typeof dongApiSearchDongs>>, TError = ErrorType<unknown>>(
 params?: DongApiSearchDongsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 동 전체조회
 */

export function useDongApiSearchDongs<TData = Awaited<ReturnType<typeof dongApiSearchDongs>>, TError = ErrorType<unknown>>(
 params?: DongApiSearchDongsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDongApiSearchDongsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary 동 전체조회
 */
export const prefetchDongApiSearchDongs = async <TData = Awaited<ReturnType<typeof dongApiSearchDongs>>, TError = ErrorType<unknown>>(
 queryClient: QueryClient, params?: DongApiSearchDongsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiSearchDongs>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ): Promise<QueryClient> => {

  const queryOptions = getDongApiSearchDongsQueryOptions(params,options)

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
}


/**
 * @summary 동 생성
 */
export const dongApiCreateDong = (
    createDongRequest: BodyType<CreateDongRequest>,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<string>(
      {url: `/v1/dongs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDongRequest, signal
    },
      options);
    }
  


export const getDongApiCreateDongMutationOptions = <TData = Awaited<ReturnType<typeof dongApiCreateDong>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<CreateDongRequest>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {
const mutationKey = ['dongApiCreateDong'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dongApiCreateDong>>, {data: BodyType<CreateDongRequest>}> = (props) => {
          const {data} = props ?? {};

          return  dongApiCreateDong(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyType<CreateDongRequest>}, TContext>}

    export type DongApiCreateDongMutationResult = NonNullable<Awaited<ReturnType<typeof dongApiCreateDong>>>
    export type DongApiCreateDongMutationBody = BodyType<CreateDongRequest>
    export type DongApiCreateDongMutationError = ErrorType<unknown>

    /**
 * @summary 동 생성
 */
export const useDongApiCreateDong = <TData = Awaited<ReturnType<typeof dongApiCreateDong>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<CreateDongRequest>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        TData,
        TError,
        {data: BodyType<CreateDongRequest>},
        TContext
      > => {

      const mutationOptions = getDongApiCreateDongMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary 동 장치 전체 조회
 */
export const dongApiGetAllDongDevices = (
    dongId: string,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<GetAllDongDevicesResponse[]>(
      {url: `/v1/dongs/${dongId}/devices`, method: 'GET', signal
    },
      options);
    }
  

export const getDongApiGetAllDongDevicesQueryKey = (dongId: string,) => {
    return [`/v1/dongs/${dongId}/devices`] as const;
    }

    
export const getDongApiGetAllDongDevicesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>>, TError = ErrorType<unknown>>(dongId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDongApiGetAllDongDevicesQueryKey(dongId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>> = ({ signal }) => dongApiGetAllDongDevices(dongId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(dongId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DongApiGetAllDongDevicesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>>
export type DongApiGetAllDongDevicesInfiniteQueryError = ErrorType<unknown>


export function useDongApiGetAllDongDevicesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>>, TError = ErrorType<unknown>>(
 dongId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiGetAllDongDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiGetAllDongDevicesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiGetAllDongDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiGetAllDongDevicesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 동 장치 전체 조회
 */

export function useDongApiGetAllDongDevicesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDongApiGetAllDongDevicesInfiniteQueryOptions(dongId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary 동 장치 전체 조회
 */
export const prefetchDongApiGetAllDongDevicesInfinite = async <TData = Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError = ErrorType<unknown>>(
 queryClient: QueryClient, dongId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ): Promise<QueryClient> => {

  const queryOptions = getDongApiGetAllDongDevicesInfiniteQueryOptions(dongId,options)

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
}


export const getDongApiGetAllDongDevicesQueryOptions = <TData = Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError = ErrorType<unknown>>(dongId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDongApiGetAllDongDevicesQueryKey(dongId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>> = ({ signal }) => dongApiGetAllDongDevices(dongId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(dongId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DongApiGetAllDongDevicesQueryResult = NonNullable<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>>
export type DongApiGetAllDongDevicesQueryError = ErrorType<unknown>


export function useDongApiGetAllDongDevices<TData = Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError = ErrorType<unknown>>(
 dongId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiGetAllDongDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiGetAllDongDevices<TData = Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiGetAllDongDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiGetAllDongDevices<TData = Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 동 장치 전체 조회
 */

export function useDongApiGetAllDongDevices<TData = Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDongApiGetAllDongDevicesQueryOptions(dongId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary 동 장치 전체 조회
 */
export const prefetchDongApiGetAllDongDevices = async <TData = Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError = ErrorType<unknown>>(
 queryClient: QueryClient, dongId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetAllDongDevices>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ): Promise<QueryClient> => {

  const queryOptions = getDongApiGetAllDongDevicesQueryOptions(dongId,options)

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
}


/**
 * @summary 동 장치 생성
 */
export const dongApiCreateDongDevice = (
    dongId: string,
    createDongDeviceRequest: BodyType<CreateDongDeviceRequest>,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<string>(
      {url: `/v1/dongs/${dongId}/devices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDongDeviceRequest, signal
    },
      options);
    }
  


export const getDongApiCreateDongDeviceMutationOptions = <TData = Awaited<ReturnType<typeof dongApiCreateDongDevice>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{dongId: string;data: BodyType<CreateDongDeviceRequest>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {
const mutationKey = ['dongApiCreateDongDevice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dongApiCreateDongDevice>>, {dongId: string;data: BodyType<CreateDongDeviceRequest>}> = (props) => {
          const {dongId,data} = props ?? {};

          return  dongApiCreateDongDevice(dongId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{dongId: string;data: BodyType<CreateDongDeviceRequest>}, TContext>}

    export type DongApiCreateDongDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof dongApiCreateDongDevice>>>
    export type DongApiCreateDongDeviceMutationBody = BodyType<CreateDongDeviceRequest>
    export type DongApiCreateDongDeviceMutationError = ErrorType<unknown>

    /**
 * @summary 동 장치 생성
 */
export const useDongApiCreateDongDevice = <TData = Awaited<ReturnType<typeof dongApiCreateDongDevice>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{dongId: string;data: BodyType<CreateDongDeviceRequest>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        TData,
        TError,
        {dongId: string;data: BodyType<CreateDongDeviceRequest>},
        TContext
      > => {

      const mutationOptions = getDongApiCreateDongDeviceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary 동 단건 조회
 */
export const dongApiGetDongById = (
    dongId: string,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<GetDongByIdResponse>(
      {url: `/v1/dongs/${dongId}`, method: 'GET', signal
    },
      options);
    }
  

export const getDongApiGetDongByIdQueryKey = (dongId: string,) => {
    return [`/v1/dongs/${dongId}`] as const;
    }

    
export const getDongApiGetDongByIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof dongApiGetDongById>>>, TError = ErrorType<unknown>>(dongId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDongApiGetDongByIdQueryKey(dongId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dongApiGetDongById>>> = ({ signal }) => dongApiGetDongById(dongId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(dongId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DongApiGetDongByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof dongApiGetDongById>>>
export type DongApiGetDongByIdInfiniteQueryError = ErrorType<unknown>


export function useDongApiGetDongByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiGetDongById>>>, TError = ErrorType<unknown>>(
 dongId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiGetDongById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiGetDongByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiGetDongById>>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiGetDongById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiGetDongByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiGetDongById>>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 동 단건 조회
 */

export function useDongApiGetDongByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof dongApiGetDongById>>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDongApiGetDongByIdInfiniteQueryOptions(dongId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary 동 단건 조회
 */
export const prefetchDongApiGetDongByIdInfinite = async <TData = Awaited<ReturnType<typeof dongApiGetDongById>>, TError = ErrorType<unknown>>(
 queryClient: QueryClient, dongId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ): Promise<QueryClient> => {

  const queryOptions = getDongApiGetDongByIdInfiniteQueryOptions(dongId,options)

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
}


export const getDongApiGetDongByIdQueryOptions = <TData = Awaited<ReturnType<typeof dongApiGetDongById>>, TError = ErrorType<unknown>>(dongId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDongApiGetDongByIdQueryKey(dongId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dongApiGetDongById>>> = ({ signal }) => dongApiGetDongById(dongId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(dongId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DongApiGetDongByIdQueryResult = NonNullable<Awaited<ReturnType<typeof dongApiGetDongById>>>
export type DongApiGetDongByIdQueryError = ErrorType<unknown>


export function useDongApiGetDongById<TData = Awaited<ReturnType<typeof dongApiGetDongById>>, TError = ErrorType<unknown>>(
 dongId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiGetDongById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiGetDongById<TData = Awaited<ReturnType<typeof dongApiGetDongById>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dongApiGetDongById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDongApiGetDongById<TData = Awaited<ReturnType<typeof dongApiGetDongById>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 동 단건 조회
 */

export function useDongApiGetDongById<TData = Awaited<ReturnType<typeof dongApiGetDongById>>, TError = ErrorType<unknown>>(
 dongId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDongApiGetDongByIdQueryOptions(dongId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary 동 단건 조회
 */
export const prefetchDongApiGetDongById = async <TData = Awaited<ReturnType<typeof dongApiGetDongById>>, TError = ErrorType<unknown>>(
 queryClient: QueryClient, dongId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dongApiGetDongById>>, TError, TData>>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ): Promise<QueryClient> => {

  const queryOptions = getDongApiGetDongByIdQueryOptions(dongId,options)

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
}


/**
 * @summary 동 삭제
 */
export const dongApiDeleteDong = (
    dongId: string,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,) => {
      
      
      return farmfarmAxiosInstance<void>(
      {url: `/v1/dongs/${dongId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDongApiDeleteDongMutationOptions = <TData = Awaited<ReturnType<typeof dongApiDeleteDong>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{dongId: string}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {
const mutationKey = ['dongApiDeleteDong'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dongApiDeleteDong>>, {dongId: string}> = (props) => {
          const {dongId} = props ?? {};

          return  dongApiDeleteDong(dongId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{dongId: string}, TContext>}

    export type DongApiDeleteDongMutationResult = NonNullable<Awaited<ReturnType<typeof dongApiDeleteDong>>>
    
    export type DongApiDeleteDongMutationError = ErrorType<unknown>

    /**
 * @summary 동 삭제
 */
export const useDongApiDeleteDong = <TData = Awaited<ReturnType<typeof dongApiDeleteDong>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{dongId: string}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        TData,
        TError,
        {dongId: string},
        TContext
      > => {

      const mutationOptions = getDongApiDeleteDongMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary 동 수정
 */
export const dongApiUpdateDong = (
    dongId: string,
    updateDongRequest: BodyType<UpdateDongRequest>,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,) => {
      
      
      return farmfarmAxiosInstance<void>(
      {url: `/v1/dongs/${dongId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateDongRequest
    },
      options);
    }
  


export const getDongApiUpdateDongMutationOptions = <TData = Awaited<ReturnType<typeof dongApiUpdateDong>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{dongId: string;data: BodyType<UpdateDongRequest>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {
const mutationKey = ['dongApiUpdateDong'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dongApiUpdateDong>>, {dongId: string;data: BodyType<UpdateDongRequest>}> = (props) => {
          const {dongId,data} = props ?? {};

          return  dongApiUpdateDong(dongId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{dongId: string;data: BodyType<UpdateDongRequest>}, TContext>}

    export type DongApiUpdateDongMutationResult = NonNullable<Awaited<ReturnType<typeof dongApiUpdateDong>>>
    export type DongApiUpdateDongMutationBody = BodyType<UpdateDongRequest>
    export type DongApiUpdateDongMutationError = ErrorType<unknown>

    /**
 * @summary 동 수정
 */
export const useDongApiUpdateDong = <TData = Awaited<ReturnType<typeof dongApiUpdateDong>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{dongId: string;data: BodyType<UpdateDongRequest>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        TData,
        TError,
        {dongId: string;data: BodyType<UpdateDongRequest>},
        TContext
      > => {

      const mutationOptions = getDongApiUpdateDongMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary 동 장치 삭제
 */
export const dongApiDeleteDongDevice = (
    dongId: string,
    dongDeviceId: string,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,) => {
      
      
      return farmfarmAxiosInstance<void>(
      {url: `/v1/dongs/${dongId}/devices/${dongDeviceId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDongApiDeleteDongDeviceMutationOptions = <TData = Awaited<ReturnType<typeof dongApiDeleteDongDevice>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{dongId: string;dongDeviceId: string}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {
const mutationKey = ['dongApiDeleteDongDevice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dongApiDeleteDongDevice>>, {dongId: string;dongDeviceId: string}> = (props) => {
          const {dongId,dongDeviceId} = props ?? {};

          return  dongApiDeleteDongDevice(dongId,dongDeviceId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{dongId: string;dongDeviceId: string}, TContext>}

    export type DongApiDeleteDongDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof dongApiDeleteDongDevice>>>
    
    export type DongApiDeleteDongDeviceMutationError = ErrorType<unknown>

    /**
 * @summary 동 장치 삭제
 */
export const useDongApiDeleteDongDevice = <TData = Awaited<ReturnType<typeof dongApiDeleteDongDevice>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{dongId: string;dongDeviceId: string}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        TData,
        TError,
        {dongId: string;dongDeviceId: string},
        TContext
      > => {

      const mutationOptions = getDongApiDeleteDongDeviceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    